#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent the dynamic table
typedef struct {
    int *array;            // Pointer to the array of elements
    int size;              // Current size of the table (number of elements)
    int capacity;          // Current capacity of the table
    int totalInsertions;   // Total number of insertions
    int totalResizeCost;   // Total cost of resizing operations
} DynamicTable;

// Function to initialize the dynamic table
void initTable(DynamicTable *table, int initialCapacity) {
    table->capacity = initialCapacity;
    table->size = 0;
    table->totalInsertions = 0;
    table->totalResizeCost = 0;
    table->array = (int *)malloc(table->capacity * sizeof(int));
    if (table->array == NULL) {
        perror("Failed to initialize table");
        exit(EXIT_FAILURE);
    }
}

// Function to resize the table
void resizeTable(DynamicTable *table) {
    int newCapacity = 2 * table->capacity;
    int *newArray = (int *)malloc(newCapacity * sizeof(int));
    if (newArray == NULL) {
        perror("Failed to resize table");
        exit(EXIT_FAILURE);
    }
    
    // Copy old elements to the new array
    for (int i = 0; i < table->size; i++) {
        newArray[i] = table->array[i];
    }
    
    // Free old array and update table
    free(table->array);
    table->array = newArray;
    table->capacity = newCapacity;

    // Update the total cost of resizing
    table->totalResizeCost += table->size;
}

// Function to insert an element into the table
void insert(DynamicTable *table, int element) {
    // Resize the table if necessary
    if (table->size == table->capacity) {
        resizeTable(table);
    }
    
    // Insert the new element
    table->array[table->size] = element;
    table->size++;
    table->totalInsertions++;

    // Display the table
    printf("Table contents: ");
    for (int i = 0; i < table->size; i++) {
        printf("%d ", table->array[i]);
    }
    printf("\n");

    // Display the cost of operations
    printf("Total insertion operations: %d\n", table->totalInsertions);
    printf("Total resize cost: %d\n", table->totalResizeCost);
    printf("Amortized cost per insertion: %.2f\n\n", (float)(table->totalResizeCost + table->totalInsertions) / table->totalInsertions);
}

int main() {
    DynamicTable table;
    char input[1024]; // Buffer to hold the input line

    printf("Enter the number of elements followed by the elements themselves (e.g., 3 1 2 3): ");
    if (fgets(input, sizeof(input), stdin) == NULL) {
        perror("Failed to read input");
        return EXIT_FAILURE;
    }

    // Parse the input
    int numElements;
    int *elements = NULL;
    int i = 0;
    
    // Tokenize the input line
    char *token = strtok(input, " ");
    if (token != NULL) {
        numElements = atoi(token);
        elements = (int *)malloc(numElements * sizeof(int));
        if (elements == NULL) {
            perror("Failed to allocate memory for elements");
            return EXIT_FAILURE;
        }

        // Read the elements
        while ((token = strtok(NULL, " ")) != NULL && i < numElements) {
            elements[i++] = atoi(token);
        }
        
        // Initialize table with a small capacity
        initTable(&table, 2);

        // Insert elements into the table
        for (int j = 0; j < numElements; j++) {
            insert(&table, elements[j]);
        }
        
        // Cleanup
        free(elements);
    } else {
        fprintf(stderr, "Invalid input format. Exiting...\n");
        return EXIT_FAILURE;
    }
    
    // Cleanup
    free(table.array);
    return 0;
}
